# NOTE: this file is managed by puppet
# Varnish environment configuration description. This was derived from
# the old style sysconfig/defaults settings

# Set this to 1 to make systemd reload try to switch vcl without restart.
RELOAD_VCL=1

# Main configuration file. You probably want to change it.
VARNISH_VCL_CONF=<%= scope.lookupvar('varnish_vcl_conf') %>

# Default address and port to bind to. Blank address means all IPv4
# and IPv6 interfaces, otherwise specify a host name, an IPv4 dotted
# quad, or an IPv6 address in brackets.
VARNISH_LISTEN_ADDRESS=<%= scope.lookupvar('varnish_listen_address') %>
VARNISH_LISTEN_PORT=<%= scope.lookupvar('varnish_listen_port') %>

# Admin interface listen address and port
VARNISH_ADMIN_LISTEN_ADDRESS=<%= scope.lookupvar('varnish_admin_listen_address') %>
VARNISH_ADMIN_LISTEN_PORT=<%= scope.lookupvar('varnish_admin_listen_port') %>

# Shared secret file for admin interface
VARNISH_SECRET_FILE=/etc/varnish/secret

# Backend storage specification, see Storage Types in the varnishd(5)
# man page for details.
VARNISH_STORAGE="file,/var/lib/varnish/varnish_storage.bin,1G"

# Default TTL used when the backend does not specify one
VARNISH_TTL=120

# User and group for the varnishd worker processes
VARNISH_USER=varnish
VARNISH_GROUP=varnish

# # Cache file location
VARNISH_STORAGE_FILE=<%= scope.lookupvar('varnish_storage_file') %>
#
# # Cache file size: in bytes, optionally using k / M / G / T suffix,
# # or in percentage of available disk space using the % suffix.
VARNISH_STORAGE_SIZE=<%= scope.lookupvar('varnish_storage_size') %>
#
# # File containing administration secret
VARNISH_SECRET_FILE=<%= scope.lookupvar('varnish_secret_file') %>
# 
# # Backend storage specification
<% if scope.lookupvar('storage_type') == 'malloc' %>
VARNISH_STORAGE="<%= scope.lookupvar('storage_type') %>,<%= scope.lookupvar('varnish_storage_size') %>"
<% else %>
VARNISH_STORAGE="<%= scope.lookupvar('storage_type') %>,<%= scope.lookupvar('varnish_secret_file') %>,<%= scope.lookupvar('varnish_storage_size') %>"
<% end %>

# Should we start varnishd at boot?  Set to "no" to disable.
START=<%= scope.lookupvar('start') %>

# Maximum number of open files (for ulimit -n)
NFILES=<%= scope.lookupvar('nfiles') %>

# Maximum locked memory size (for ulimit -l)
# Used for locking the shared memory log in memory.  If you increase log size,
# you need to increase this number as well
MEMLOCK=<%= scope.lookupvar('memlock') %>

# Default varnish instance name is the local nodename.  Can be overridden with
# the -n switch, to have more instances on a single server.
# INSTANCE=$(uname -n)

#
# # The minimum number of worker threads to start
VARNISH_MIN_THREADS=<%= scope.lookupvar('varnish_min_threads') %>
#
# # The Maximum number of worker threads to start
VARNISH_MAX_THREADS=<%= scope.lookupvar('varnish_max_threads') %>
#
# # Idle timeout for worker threads
VARNISH_THREAD_TIMEOUT=<%= scope.lookupvar('varnish_thread_timeout') %>

#
# # DAEMON_OPTS is used by the init script.  If you add or remove options, make
# # sure you update this section, too.
DAEMON_OPTS=" \
<% if scope.lookupvar('varnish::params::version') == 4 -%>
             -p thread_pool_min=${VARNISH_MIN_THREADS} \
             -p thread_pool_max=${VARNISH_MAX_THREADS} \
             -p thread_pool_timeout=${VARNISH_THREAD_TIMEOUT} \
<% end -%>
"