# NOTE: this file is managed by puppet
#
vcl 4.0;

import std;

#Import file with probe definitions
include "includes/probes.vcl";

#Import file with backend definitions
include "includes/backends.vcl";

#Import file with director definitions;
include "includes/directors.vcl";

#Import file with acl definitions
include "includes/acls.vcl";

sub vcl_recv {

<%- if @logrealip -%> 
  if (req.http.X-Forwarded-For) {
     std.log("RealIP:" + req.http.X-Forwarded-For); 
  } else {
     std.log("RealIP:" + client.ip); 
  }
<%- end -%>

  unset req.http.If-Modified-Since;
  unset req.http.If-None-Match; 

  # cookie sanitization
  if (req.http.Cookie) {

     set req.http.Cookie = ";"+req.http.Cookie;
     set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
     set req.http.Cookie = regsuball(req.http.Cookie, ";(<%- @cookiekeeps.each do |cookie| -%><%= cookie %><%- if cookie != @cookiekeeps[-1] -%>|<%-end-%><%-end-%>)=", "; \1=");
     set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
     set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
    if (req.http.Cookie == "") {
      unset req.http.Cookie;
    }
  }

  if (
     	# Static file cache
     	((req.url ~ "(?i)\.(jpg|jpeg|gif|png|tiff|tif|svg|swf|ico|css|kss|js|vsd|doc|ppt|pps|xls|pdf|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm|jar|class|flv|exe)$")||
     	# Plone images cache
     	(req.url ~ "(?i)(image|imagem_large|image_preview|image_mini|image_thumb|image_tile|image_icon|imagem_listing)$")) && 
     	# Plone resource editor
     	(req.url !~ "(?i)\@\@plone\.resourceeditor\.getfile\?path\=")
     ) {
     unset req.http.Cookie;
  }
  if (req.url ~ "(?i)/modules/pm_adsandslideshow/phpThumb/phpThumb.php\?") {
    std.log( "CACHE-DEBUG URL:"+req.url+" COOKIE:"+req.http.Cookie+" REMOVED IP:"+client.ip);
    unset req.http.Cookie;
  }


  <%- if @blockedips.length > 0 -%>
  # blocked list
  if ((client.ip ~ blockedips)<%- if @blockedbots.length > 0 -%>||(req.http.User-Agent ~ "(?i)<%- @blockedbots.each do |bot| -%><%= bot %><%- if cookie != @blockedbots[-1] -%>|<%-end-%><%-end-%>")<%-end-%>) {
      return (synth(403, "Access forbidden."));
  }
  <%- end -%>

  <%- if @enable_waf -%>
  # Web Application Firewall
  # These rules are defined by a number between semicolons. Example: ;48;
  # All expections must be defined at the req.http.EXCE variable
  # DO NOT MODIFY waf.vcl FILE!
  
  set req.http.EXCE = ";<%- @wafexceptions.each do |exce| -%><%= exce %>;<%-end-%>";
  set req.http.RULE = "";

  include "includes/waf.vcl";
  if (!(req.http.RULE == "")) {
    std.log( "ATTACK SIGNATURE rules:"+req.http.RULE+" url:"+req.url+" COOKIE:"+req.http.Cookie+"   IP:"+client.ip);
    return (synth(403, "ATTACK DETECTED - IP LOGGED"));
  }
  unset req.http.EXCE;
  unset req.http.RULE;
  <%- end -%>

  # backend selection logic
  include "includes/backendselection.vcl";

  <%- if @purgeips.length > 0 -%>
  # Allows purge for the IPs in purge ACL
  if (req.method == "PURGE") {
    if (!(client.ip ~ purge)) {
        return (synth(405, "Not allowed."));
    }
    ban(" req.url == " + req.url);
    set req.url = regsuball(req.url,"80","443"); 
    set req.url = regsuball(req.url,"http","https");
    ban(" req.url == " + req.url);
    # Throw a synthetic page so the
    # request won't go to the backend.
    return (synth(200, "Added ban."));
  }
  <%- end -%>

  if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "TRACE" &&
      req.method != "OPTIONS" &&
      req.method != "DELETE") {
     /* Non-RFC2616 or CONNECT which is weird. */
     return (pipe);
  }
  
  # always pass through POST requests and those with basic auth
  if (req.http.Authorization || req.method == "POST") {
	  return (pass);
  }
}

#sub vcl_hash {
#}


#sub vcl_pipe {
#  set req.http.Connection = "close";  
#  return (pipe);
#}

sub vcl_hit {
   std.log( "CACHE-DEBUG URL:"+req.url+" COOKIE:"+req.http.Cookie+" AVISO:HIT IP:"+client.ip);
   if (req.method == "PURGE") {
      return (synth(200, "Purged."));
   }
}

sub vcl_miss {
    std.log( "CACHE-DEBUG URL:"+req.url+" COOKIE:"+req.http.Cookie+" AVISO:MISS IP:"+client.ip);
    if (req.method == "PURGE") {
       return (synth(200, "Purged."));
    }
}

sub vcl_pass {
   std.log( "CACHE-DEBUG URL:"+req.url+" COOKIE:"+req.http.Cookie+" AVISO:PASS IP:"+client.ip);
}

sub vcl_backend_response {

  unset beresp.http.X-Powered-By;
  set beresp.http.Server = "No-limit-Network";
<%- if @defaultgrace -%>
  # Default grace period
  set beresp.grace = <%= @defaultgrace %>;
<%- end -%>
  
  if (beresp.http.content-type ~ "<%- @gziptypes.each do |type| -%>^<%= type %><%- if type != @gziptypes[-1] -%>|<%-end-%><%-end-%>") {
     set beresp.do_gzip = true;
  }
 
  # Remove I18N_LANGUAGE Set-Cookie 
  if (beresp.http.Set-Cookie ~ "I18N_LANGUAGE") {
    unset beresp.http.Set-Cookie;
  }

  # remove "must-revalidate"  
  if (beresp.http.Cache-Control ~ "must-revalidate") {
  	set beresp.http.Cache-Control = regsuball(beresp.http.Cache-Control, "must-revalidate *,?", "");
  }

  # Default minimum cache period 
  if(!(bereq.http.Cookie)&&!(beresp.http.Set-Cookie)&&(bereq.method == "GET")) {
     set beresp.ttl = <%= @min_cache_time %>;
  }

  if ( 
     # Static file cache
     (bereq.url ~ "(?i)\.(jpg|jpeg|gif|png|tiff|tif|svg|swf|ico|css|kss|js|vsd|doc|ppt|pps|xls|pdf|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm|jar|class|flv|exe)$")||
     # Plone images cache
     (bereq.url ~ "(?i)(image|imagem_large|image_preview|image_mini|image_thumb|image_tile|image_icon|imagem_listing)$")
  ) {
    set beresp.ttl = <%= @static_cache_time %>;
    std.log( "CACHE-DEBUG Remove Cookie on image");
    unset beresp.http.Set-Cookie;
  }

  if (!(beresp.http.Expires)&&!(beresp.http.Cache-Control)) {
    set beresp.ttl = <%= @static_cache_time %>;
    set beresp.http.Cache-Control = "public, proxy-revalidate, max-age=" + beresp.ttl;
    set beresp.http.Pragma = "public";
    set beresp.http.Expires = "" + (now + beresp.ttl );
    set beresp.http.X-NLN = "true";
  }

  #Avoid cache of objects > 100M
  if ( beresp.http.Content-Length ~ "[0-9]+[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]" ) { 
    set beresp.ttl = <%= @static_cache_time %>; 
    set beresp.uncacheable = true;
    return (deliver);
  }
}

sub vcl_deliver {
     if (obj.hits > 0) {
         set resp.http.X-Cache = "HIT";
     } else {
         set resp.http.X-Cache = "MISS";
     }
}

sub vcl_backend_error {
     
     ## Moved Permanently
     if (beresp.status == 750) {
        set beresp.http.Location = bereq.url; ## FIXME
        set beresp.status = 301;
        return(deliver);
     }

     set beresp.http.Content-Type = "text/html; charset=utf-8";
     set beresp.http.Retry-After = "5";
     synthetic ({"
 <?xml version='1.0' encoding='utf-8'?>
 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html>
   <head>
     <title>"} + beresp.status + " " + beresp.reason + {"</title>
   </head>
   <body>
     <h1>Error "} + beresp.status + " " + beresp.reason + {"</h1>
     <p>"} + beresp.reason + {"</p>
     <h3>Guru Meditation:</h3>
     <p>XID: "} + bereq.xid + {"</p>
     <hr>
    <p>Varnish cache server</p>
   </body>
 </html>
 "});
   return (deliver);
}
# 
sub vcl_init {
	call directors_init;
	return (ok);
}
# 
# sub vcl_fini {
# 	return (ok);
# }
